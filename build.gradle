buildscript {

    ext {
        kotlinVersion = '1.6.10'
        springBootVersion = '2.6.2'
        springBootVersionTest = '2.7.6'
        springKafkaVersion = '2.8.1'
        archunitVersion = '0.14.1'
        epLoggingVersion = '1.0.15'
        epMetricsVersion = '0.4.12'
        epSecurityStsVersion = '0.0.21'
        logstashLogbackVersion = '7.0.1'
        jacksonKotlinVersion = '2.13.1'

        // TEST
        mockkVersion = '1.12.1'
        jupiterVersion = '5.8.2'
        ninjaMockkVersion = '3.1.0'
        mockserverNettyVersion = '5.11.2'
    }

    repositories {
        mavenCentral()

        maven {
            url "https://maven.pkg.github.com/navikt/maven-release"
            credentials {
                username = "token"
                password = "$System.env.GITHUB_TOKEN"
            }
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.15'
    id "org.owasp.dependencycheck" version "6.5.0.1"
    id 'com.adarshr.test-logger' version '2.1.0'
    id "org.sonarqube" version "2.7.1"
    id 'jacoco'
}

assert JavaVersion.current().isJava11Compatible(): "Java 11 or newer is required"

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'no.nav.eessi.pensjon'

dependencies {

    // Spring-boot
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-actuator:${springBootVersion}")

    implementation "org.springframework.kafka:spring-kafka:$springKafkaVersion"

    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonKotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    implementation("no.nav.eessi.pensjon:ep-security-sts:${epSecurityStsVersion}")

    // Micrometer
    implementation("io.micrometer:micrometer-registry-prometheus")
    implementation("no.nav.eessi.pensjon:ep-metrics:${epMetricsVersion}")

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
    configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j'
    implementation("no.nav.eessi.pensjon:ep-logging:${epLoggingVersion}")

    // TEST
    testImplementation("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
        exclude module: 'junit'
        exclude module: "mockito-core"
        exclude module: "junit-vintage-engine"
    }
    testImplementation "org.springframework.kafka:spring-kafka-test:$springBootVersionTest"

    testImplementation("org.junit.jupiter:junit-jupiter:${jupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${jupiterVersion}")

    // Next version (5.5.4) fails, should be investigated
    testImplementation("org.mock-server:mockserver-client-java:${mockserverNettyVersion}"){
    }
    testImplementation("org.mock-server:mockserver-netty:${mockserverNettyVersion}") {
    }
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.8.2')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.2')
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation("com.ninja-squad:springmockk:$ninjaMockkVersion")
    implementation('net.logstash.logback:logstash-logback-encoder:7.0.1')
    implementation('ch.qos.logback:logback-classic:1.2.9')

    // Architecture tests
    testImplementation "com.tngtech.archunit:archunit:${archunitVersion}"
}

test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '11'
    }
}

repositories {

    mavenCentral()

    ["maven-release", "ep-metrics"].each { repo ->
        String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
        if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")
        maven {
            url = uri("https://maven.pkg.github.com/navikt/$repo")
            credentials {
                username = "token"
                password = token
            }
        }
    }

}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
	toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.sonarqube.dependsOn tasks["jacocoTestReport"]

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    rejectVersionIf {
        ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'pr']
                .any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/ }
    }
    revision = 'release'
}