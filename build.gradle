buildscript {
    repositories {
        mavenCentral()

        maven {
            url "https://maven.pkg.github.com/navikt/maven-release"
            credentials {
                username = "token"
                password = "$System.env.GITHUB_TOKEN"
            }
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.15'
    id "org.owasp.dependencycheck" version "6.1.1"
    id 'com.adarshr.test-logger' version '2.1.0'
}

assert JavaVersion.current().isJava11Compatible(): "Java 11 or newer is required"

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'no.nav.eessi.pensjon'

dependencies {

    // Spring-boot
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-actuator")

    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
        exclude module: "mockito-core"
        exclude module: "junit-vintage-engine"
    }
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    //mock - test
    testImplementation("org.junit.jupiter:junit-jupiter:${jupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${jupiterVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoJunitJupiterVersion}")
    testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoKotlinVersion}")
    testImplementation("org.mock-server:mockserver-client-java:${mockServerClientJavaVersion}")
    // Next version (5.5.4) fails, should be investigated
    testImplementation("org.mock-server:mockserver-netty:${mockserverNettyVersion}") {
        exclude module: 'junit'
    }
    testImplementation "io.mockk:mockk:${mockkVersion}"

    // Architecture tests
    testImplementation "com.tngtech.archunit:archunit:${archunitVersion}"

    implementation("no.nav.eessi.pensjon:ep-security-sts:${epSecurityStsVersion}")

    // Micrometer
    implementation("io.micrometer:micrometer-registry-prometheus")
    implementation("no.nav.eessi.pensjon:ep-metrics:${epMetricsVersion}")

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
    configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j'
    implementation("no.nav.eessi.pensjon:ep-logging:${epLoggingVersion}")

}

test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '11'
    }
}

repositories {

    mavenCentral()

    ["maven-release", "ep-metrics"].each { repo ->
        String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
        if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")
        maven {
            url = uri("https://maven.pkg.github.com/navikt/$repo")
            credentials {
                username = "token"
                password = token
            }
        }
    }

}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    rejectVersionIf {
        ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'pr']
                .any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/ }
    }
    revision = 'release'
}
